def shapefile_to_geo(p_dataframe, p_mesh_params):

    fp = open("./msh/temp.geo_unrolled", "w")

    coastline_index = list(p_dataframe.types).index("coastline")
    counter = 0
    point_counter = 1
    start_point = 1
    line_counter = 0
    line_loop_counter = 0
    start_coastline = 0
    end_coastline = 0

    for shape in p_dataframe.geometry:
        for point in list(shape.coords):
            fp.write("Point({}) = {{{}, {}, 0}};\n".format(point_counter, point[0], point[1]))
            point_counter += 1
        end_point = point_counter - 1
        line_counter += 1
        fp.write("Line({}) = {{{}:{}}};\n".format(line_counter, start_point, end_point))
        line_counter += 1
        fp.write("Line({}) = {{{},{}}};\n".format(line_counter, end_point, start_point))
        fp.write("Line Loop({}) = {{{},{}}};\n".format(line_loop_counter+1, line_counter-1, line_counter))
        if counter == coastline_index:
            end_coastline = end_point
            start_coastline = start_point
        start_point = point_counter
        counter += 1
        line_loop_counter += 1

    for line_loop in range(line_loop_counter):
        fp.write("Plane Surface({}) = {{{}}};\n".format(line_loop+1, line_loop+1))

    fp.write("Field[1] = Attractor;\n")
    fp.write("Field[1].NodesList = {{{}:{}}};\n".format(start_coastline + 50, end_coastline - p_mesh_params["extra_points"] - 50))
    fp.write("Field[2] = Threshold;\n")
    fp.write("Field[2].IField = 1;\n")
    fp.write("Field[2].DistMax = {};\n".format(p_mesh_params["DistMax"]))
    fp.write("Field[2].DistMin = {};\n".format(p_mesh_params["DistMin"]))
    fp.write("Field[2].LcMax = {};\n".format(p_mesh_params["LcMax"]))
    fp.write("Field[2].LcMin = {};\n".format(p_mesh_params["LcMin"]))
    fp.write("Background Field = 2;\n")
    fp.write("Mesh.Algorithm = 6;\n")
    fp.write("Mesh.CharacteristicLengthExtendFromBoundary = 0;\n")
    fp.close()

    generate_mesh("./msh/temp.geo_unrolled")
    return


def generate_mesh(file):
    os.system("gmsh-win\gmsh.exe -2 {} -o ./msh/temp.msh".format(file))
















def shapefile_to_geo(p_dataframe, p_mesh_params):

    gmsh.initialize()
    gmsh.model.add("my_mesh")
    coastline_index = list(p_dataframe.types).index("coastline")
    coastline = []
    counter = 0
    curve_loops = []
    to_fix = 0
    for shape in p_dataframe.geometry:
        shape_points = []
        for point in list(shape.coords):
            shape_points.append(gmsh.model.geo.addPoint(point[0], point[1], 0))
        shape_lines = []
        for index in range(len(shape_points)):
            if counter == coastline_index:
                if index == len(shape_points) - 1 - p_mesh_params["extra_points"]:
                    shape_lines.append(gmsh.model.geo.addLine(shape_points[index], shape_points[0]))
                    to_fix = [shape_lines[-1], shape_points[index], shape_points[0]]
                    break
                else:
                    shape_lines.append(gmsh.model.geo.addLine(shape_points[index], shape_points[index + 1]))
            else:
                if index == len(shape_points)-1:
                    shape_lines.append(gmsh.model.geo.addLine(shape_points[index], shape_points[0]))
                else:
                    shape_lines.append(gmsh.model.geo.addLine(shape_points[index], shape_points[index+1]))
        curve_loops.append(gmsh.model.geo.addCurveLoop(shape_lines))
        if counter == coastline_index:
            coastline = shape_points
        counter += 1
    gmsh.model.geo.addPlaneSurface(curve_loops)
    gmsh.option.setNumber("Mesh.Algorithm", 6)
    gmsh.option.setNumber("Mesh.CharacteristicLengthExtendFromBoundary", 0)
    gmsh.model.geo.synchronize()

    coastline_len = len(coastline)

    gmsh.model.mesh.field.add("Attractor", 1)
    gmsh.model.mesh.field.setNumbers(1, "NodesList", coastline[100:
                                                               coastline_len - p_mesh_params["extra_points"] - 100])
    gmsh.model.mesh.field.add("Threshold", 2)
    gmsh.model.mesh.field.setNumber(2, "IField", 1)
    gmsh.model.mesh.field.setNumber(2, "DistMax", p_mesh_params["DistMax"])
    gmsh.model.mesh.field.setNumber(2, "DistMin", p_mesh_params["DistMin"])
    gmsh.model.mesh.field.setNumber(2, "LcMax", p_mesh_params["LcMax"])
    gmsh.model.mesh.field.setNumber(2, "LcMin", p_mesh_params["LcMin"])
    gmsh.model.mesh.field.setAsBackgroundMesh(2)
    gmsh.write("./msh/temp.geo_unrolled")
    gmsh.finalize()
    for line in fileinput.input("./msh/temp.geo_unrolled", inplace=1):
        if "Line({})".format(to_fix[0]) in line:
            line = "Line({}) = {{{}:{}}};\n".format(to_fix[0], to_fix[1], to_fix[2])
        sys.stdout.write(line)
    gmsh.initialize()
    generate_mesh("./msh/temp.geo_unrolled")

    return


def generate_mesh(file=None):
    if file is None:
        gmsh.option.setNumber("Mesh.Algorithm", 6)
        gmsh.option.setNumber("Mesh.CharacteristicLengthExtendFromBoundary", 0)
        gmsh.model.mesh.generate(2)
        gmsh.option.setNumber("Mesh.MshFileVersion", 2.10)
        gmsh.write("./msh/temp.msh")
    else:
        fp = open(file, "a")
        fp.write("Mesh.Algorithm=6;\n")
        fp.write("Mesh.CharacteristicLengthExtendFromBoundary=0;\n")
        fp.close()
        os.system("gmsh-win\gmsh.exe -2 {} -o ./msh/temp.msh".format(file))















def shapefile_to_geo(p_dataframe, p_mesh_params):

    fp = open("./msh/temp.geo_unrolled", "w")

    coastline_index = list(p_dataframe.types).index("coastline")
    counter = 0
    point_counter = 1
    start_point = 1
    line_counter = 1
    line_loop_counter = 1
    start_coastline = 0
    end_coastline = 0
    curve_loops = []

    for shape in p_dataframe.geometry:
        shape_points = []
        for point in list(shape.coords):
            fp.write("Point({}) = {{{}, {}, 0}};\n".format(point_counter, point[0], point[1]))
            shape_points.append(point_counter)
            point_counter += 1
        end_point = point_counter - 1
        shape_lines = []
        for index in range(len(shape_points)):
            if counter == coastline_index:
                if index == len(shape_points) - 1 - p_mesh_params["extra_points"]:
                    fp.write("Line({}) = {{{}:{}}};\n".format(line_counter, shape_points[index], shape_points[0]))
                    shape_lines.append(line_counter)
                    line_counter += 1
                    break
                else:
                    fp.write("Line({}) = {{{},{}}};\n".format(line_counter, shape_points[index], shape_points[index + 1]))
                    shape_lines.append(line_counter)
                    line_counter += 1
            else:
                if index == len(shape_points) - 1:
                    fp.write("Line({}) = {{{},{}}};\n".format(line_counter, shape_points[index], shape_points[0]))
                    shape_lines.append(line_counter)
                    line_counter += 1
                else:
                    fp.write("Line({}) = {{{},{}}};\n".format(line_counter, shape_points[index], shape_points[0]))
                    shape_lines.append(line_counter)
                    line_counter += 1

        loop_buffer = "Line Loop({}) = {{".format(line_loop_counter)
        curve_loops.append(line_loop_counter)
        line_loop_counter += 1
        for element in shape_lines:
            loop_buffer += "{}, ".format(element)
        loop_buffer = loop_buffer[:-2]+"};\n"
        fp.write(loop_buffer)
        if counter == coastline_index:
            end_coastline = end_point
            start_coastline = start_point
        start_point = point_counter
        counter += 1

    for line_loop in curve_loops:
        fp.write("Plane Surface({}) = {{{}}};\n".format(line_loop, line_loop))

    fp.write("Field[1] = Attractor;\n")
    fp.write("Field[1].NodesList = {{{}:{}}};\n".format(start_coastline + 50, end_coastline - p_mesh_params["extra_points"] - 50))
    fp.write("Field[2] = Threshold;\n")
    fp.write("Field[2].IField = 1;\n")
    fp.write("Field[2].DistMax = {};\n".format(p_mesh_params["DistMax"]))
    fp.write("Field[2].DistMin = {};\n".format(p_mesh_params["DistMin"]))
    fp.write("Field[2].LcMax = {};\n".format(p_mesh_params["LcMax"]))
    fp.write("Field[2].LcMin = {};\n".format(p_mesh_params["LcMin"]))
    fp.write("Background Field = 2;\n")
    fp.write("Mesh.Algorithm = 6;\n")
    fp.write("Mesh.CharacteristicLengthExtendFromBoundary = 0;\n")
    fp.close()

    generate_mesh("./msh/temp.geo_unrolled")
    return


def generate_mesh(file):
    os.system("gmsh-win\gmsh.exe -2 {} -o ./msh/temp.msh".format(file))
